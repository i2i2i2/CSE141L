$date
	Sun May  7 01:31:41 2017
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module ALU_tb $end
$var wire 8 ! result [7:0] $end
$var wire 1 " flipout $end
$var wire 1 # flagout $end
$var wire 1 $ branch $end
$var reg 9 % control [8:0] $end
$var reg 1 & flagin $end
$var reg 1 ' flipin $end
$var reg 8 ( srcA [7:0] $end
$var reg 8 ) srcB [7:0] $end
$var reg 8 * srcC [7:0] $end
$scope module testALU $end
$var wire 1 $ branch $end
$var wire 1 + calcFlip $end
$var wire 9 , control [8:0] $end
$var wire 1 & flagin $end
$var wire 1 ' flipin $end
$var wire 8 - srcA [7:0] $end
$var wire 8 . srcB [7:0] $end
$var wire 8 / srcC [7:0] $end
$var wire 8 0 sum [7:0] $end
$var wire 8 1 shifted [7:0] $end
$var wire 1 2 shiftFlag $end
$var wire 8 3 result [7:0] $end
$var wire 1 " flipout $end
$var wire 1 # flagout $end
$var wire 8 4 addSrc [7:0] $end
$var wire 1 5 addFlag $end
$scope module ALUadder $end
$var wire 8 6 add1 [7:0] $end
$var wire 8 7 add2 [7:0] $end
$var wire 8 8 add2_flip [7:0] $end
$var wire 1 & ci $end
$var wire 1 9 ci_flag $end
$var wire 1 : ci_flip $end
$var wire 1 5 co $end
$var wire 1 ; flag $end
$var wire 1 + flip $end
$var wire 8 < sum [7:0] $end
$var wire 1 = co_flip $end
$upscope $end
$scope module ALUshifter $end
$var wire 1 & flag $end
$var wire 2 > sel [1:0] $end
$var wire 8 ? shifted [7:0] $end
$var wire 8 @ val [7:0] $end
$var wire 1 2 flagout $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @
bx ?
bx >
x=
bx <
x;
x:
x9
bx 8
bx 7
bx 6
x5
bx 4
bx 3
x2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
bx *
bx )
bx (
x'
x&
bx %
x$
x#
x"
bx !
$end
#100
0#
b10010100 !
b10010100 3
05
b10010100 0
b10010100 <
0=
0:
b1010101 8
b1010101 4
b1010101 7
0+
12
b11111 1
b11111 ?
b10 >
1;
09
0"
b10xx000 %
b10xx000 ,
0'
0&
b1010101 )
b1010101 .
b111111 (
b111111 -
b111111 6
b111111 @
#200
1#
0+
1:
b0 8
b0 !
b0 3
15
19
b0 4
b0 7
1"
b0 0
b0 <
1=
b10xx001 %
b10xx001 ,
1'
b11111111 1
b11111111 ?
1&
b0 )
b0 .
b11111111 (
b11111111 -
b11111111 6
b11111111 @
#300
0#
b11110001 !
b11110001 3
05
b11110001 0
b11110001 <
1+
09
b11110001 8
b1111111 1
b1111111 ?
b1 >
0;
b1110 4
b1110 7
b1xx000 %
b1xx000 ,
0'
b1110 )
b1110 .
#400
0:
1#
19
b11111111 8
b11111111 !
b11111111 3
15
02
b10 >
1;
b0 4
b0 7
0"
b11111111 0
b11111111 <
0=
b10000000 1
b10000000 ?
b10xx000 %
b10xx000 ,
1'
b0 )
b0 .
b0 (
b0 -
b0 6
b0 @
#500
b1 !
b1 3
b1 0
b1 <
1:
b0 8
b11 >
09
b11111111 4
b11111111 7
b11xx000 %
b11xx000 ,
0'
b0 1
b0 ?
0&
b11111111 )
b11111111 .
#600
0#
0:
05
b1 8
0+
b1 4
b1 7
b0 >
0;
b1000xx001 %
b1000xx001 ,
1'
#700
x=
x:
x5
bx 8
x+
bx 4
bx 7
1#
b11000000 !
b11000000 3
12
1"
bx 0
bx <
b11000000 1
b11000000 ?
bx100xxxxx %
bx100xxxxx ,
b10000001 (
b10000001 -
b10000001 6
b10000001 @
#800
b1000000 !
b1000000 3
b1000000 1
b1000000 ?
b1 >
bx101xxxxx %
bx101xxxxx ,
#900
19
b10000000 !
b10000000 3
b10 >
1;
0"
b10000000 1
b10000000 ?
bx110xxxxx %
bx110xxxxx ,
1&
b1 (
b1 -
b1 6
b1 @
#1000
b11 !
b11 3
b11 >
1"
b11 1
b11 ?
bx111xxxxx %
bx111xxxxx ,
b10000001 (
b10000001 -
b10000001 6
b10000001 @
#1100
x#
x9
bx !
bx 3
x2
0$
bx >
x;
x"
bx 1
bx ?
bx00xxx %
bx00xxx ,
bx (
bx -
bx 6
bx @
#1200
02
0"
bx01xxx %
bx01xxx ,
b0 (
b0 -
b0 6
b0 @
#1300
1$
b1000000 (
b1000000 -
b1000000 6
b1000000 @
#1400
x2
bx10xxx %
bx10xxx ,
0$
b0xxxx (
b0xxxx -
b0xxxx 6
b0xxxx @
#1500
1$
b1xxxx (
b1xxxx -
b1xxxx 6
b1xxxx @
#1600
12
1"
bx11xxx %
bx11xxx ,
b11111111 (
b11111111 -
b11111111 6
b11111111 @
#1700
x2
0$
0"
b11111 (
b11111 -
b11111 6
b11111 @
#1800
0#
b1 !
b1 3
05
b1 0
b1 <
0=
b1 8
0:
b1 4
b1 7
0+
09
02
b0 1
b0 ?
b0 >
0;
x$
b0xx011 %
b0xx011 ,
b0 )
b0 .
b0 (
b0 -
b0 6
b0 @
#1900
b0 !
b0 3
b0 0
b0 <
b0 8
b0 4
b0 7
b10000000 )
b10000000 .
#2000
b1 !
b1 3
b1 0
b1 <
b1 8
b1 4
b1 7
b0xx101 %
b0xx101 ,
b10101111 *
b10101111 /
b10100000 )
b10100000 .
#2100
b0 !
b0 3
b0 0
b0 <
b0 8
b0 4
b0 7
b10111111 )
b10111111 .
#2200
b1 !
b1 3
b1 0
b1 <
b1 8
b1 4
b1 7
b0xx111 %
b0xx111 ,
0'
#2300
b0 !
b0 3
b0 0
b0 <
b0 8
b0 4
b0 7
0&
#2400
1&
1'
#2500
